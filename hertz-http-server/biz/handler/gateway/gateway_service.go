// Code generated by hertz generator.

package gateway

import (
	convertService "api-gateway/conversion-service/kitex_gen/conversion"
	"api-gateway/global"
	"api-gateway/hertz-http-server/biz/model/conversion"
	"api-gateway/hertz-http-server/biz/model/length"
	"api-gateway/hertz-http-server/biz/model/reverse"
	"api-gateway/hertz-http-server/biz/model/substring/api"
	lengthService "api-gateway/length-service/kitex_gen/length"
	reverseService "api-gateway/reverse-service/kitex_gen/reverse"
	"api-gateway/utils"
	"context"
	"github.com/cloudwego/kitex/pkg/klog"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CalculateLength .
// @router /length [POST]
func CalculateLength(ctx context.Context, c *app.RequestContext) {
	var err error
	var req length.LengthRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 将 req params 绑定到 RPC 请求结构（遵循 RPC 服务 IDL 中声明的请求格式
	reqRpc := &lengthService.LengthRequest{
		InputString: req.InputString,
	}

	var respRpc lengthService.LengthResponse
	klog.Info(global.LengthCli)
	err = utils.MakeRpcRequest(ctx, global.LengthCli, "calculateLength", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	resp := &length.LengthResponse{
		Length: respRpc.Length,
	}

	c.JSON(consts.StatusOK, resp)
}

// ReverseString .
// @router /reverse [POST]
func ReverseString(ctx context.Context, c *app.RequestContext) {
	var err error
	var req reverse.ReverseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	reverseClient, err := utils.GenerateClient("ReverseService")
	if err != nil {
		panic(err)
	}

	reqRpc := &reverseService.ReverseRequest{
		InputString: req.InputString,
	}

	var respRpc reverseService.ReverseResponse
	err = utils.MakeRpcRequest(ctx, reverseClient, "reverseString", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	resp := &reverse.ReverseResponse{
		ReversedString: respRpc.ReversedString,
	}

	c.JSON(consts.StatusOK, resp)
}

// ConvertCase .
// @router /convert [POST]
func ConvertCase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversion.ConversionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	convertClient, err := utils.GenerateClient("ConversionService")
	if err != nil {
		panic(err)
	}

	reqRpc := &convertService.ConversionRequest{
		InputString: req.InputString,
	}

	var respRpc convertService.ConversionResponse
	err = utils.MakeRpcRequest(ctx, convertClient, "convertCase", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	resp := &conversion.ConversionResponse{
		ConvertedString: respRpc.ConvertedString,
	}

	c.JSON(consts.StatusOK, resp)
}

// FindSubstring .
// @router /substring [POST]
func FindSubstring(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SubstringRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.SubstringResponse)

	c.JSON(consts.StatusOK, resp)
}
