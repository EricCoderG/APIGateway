// Code generated by Kitex v0.6.1. DO NOT EDIT.

package reverseservice

import (
	reverse "api-gateway/reverse-service/kitex_gen/reverse"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return reverseServiceServiceInfo
}

var reverseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ReverseService"
	handlerType := (*reverse.ReverseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"reverseString": kitex.NewMethodInfo(reverseStringHandler, newReverseServiceReverseStringArgs, newReverseServiceReverseStringResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "reverse",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func reverseStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*reverse.ReverseServiceReverseStringArgs)
	realResult := result.(*reverse.ReverseServiceReverseStringResult)
	success, err := handler.(reverse.ReverseService).ReverseString(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newReverseServiceReverseStringArgs() interface{} {
	return reverse.NewReverseServiceReverseStringArgs()
}

func newReverseServiceReverseStringResult() interface{} {
	return reverse.NewReverseServiceReverseStringResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ReverseString(ctx context.Context, req *reverse.ReverseRequest) (r *reverse.ReverseResponse, err error) {
	var _args reverse.ReverseServiceReverseStringArgs
	_args.Req = req
	var _result reverse.ReverseServiceReverseStringResult
	if err = p.c.Call(ctx, "reverseString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
