// Code generated by Kitex v0.6.1. DO NOT EDIT.

package conversionservice

import (
	conversion "api-gateway/conversion-service/kitex_gen/conversion"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return conversionServiceServiceInfo
}

var conversionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ConversionService"
	handlerType := (*conversion.ConversionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"convertCase": kitex.NewMethodInfo(convertCaseHandler, newConversionServiceConvertCaseArgs, newConversionServiceConvertCaseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "conversion",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func convertCaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*conversion.ConversionServiceConvertCaseArgs)
	realResult := result.(*conversion.ConversionServiceConvertCaseResult)
	success, err := handler.(conversion.ConversionService).ConvertCase(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newConversionServiceConvertCaseArgs() interface{} {
	return conversion.NewConversionServiceConvertCaseArgs()
}

func newConversionServiceConvertCaseResult() interface{} {
	return conversion.NewConversionServiceConvertCaseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ConvertCase(ctx context.Context, req *conversion.ConversionRequest) (r *conversion.ConversionResponse, err error) {
	var _args conversion.ConversionServiceConvertCaseArgs
	_args.Req = req
	var _result conversion.ConversionServiceConvertCaseResult
	if err = p.c.Call(ctx, "convertCase", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
